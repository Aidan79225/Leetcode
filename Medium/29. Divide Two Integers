class Solution {
public:
    int divide(int dividend, int divisor) {
        if(divisor == -2147483648 && dividend == -2147483648)return 1;
        else if(divisor == -2147483648 && dividend != -2147483648)return 0;
        if(dividend > 0 && divisor < 0)return -divide(dividend , -divisor);
        else if(dividend < 0 && divisor > 0){
            if(-dividend-divisor >0)
                return -divide(-dividend-divisor , divisor) -1;
            else
                return -divide(-dividend , divisor) ;
        }   
        else if(dividend < 0 && divisor < 0){
            if(dividend == -2147483648 && divisor == -1)return 2147483647;
            if(-dividend+divisor >0)
                return divide(-dividend+divisor , -divisor) + 1;
            else
                return divide(-dividend , -divisor) ;
        }
        else if(dividend > 0 && divisor >0){
            int i=0;
            int divisorTemp =divisor;
            int count =0;
            int countTemp = 1;
            
            
            while(dividend >= 0){
                i+= count;
                count = 1;
                divisorTemp = divisor;
                while((2147483647>>1) >= divisorTemp && dividend>mult2(divisorTemp)){
                    divisorTemp = mult2(divisorTemp);
                    count = mult2(count);
                }
                dividend -= divisorTemp;
            }
            return i;
        }
        return 0;
    }
    int mult2(int i){
        return (i<<1);
    }
};
